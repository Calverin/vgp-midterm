pico-8 cartridge // http://www.pico-8.com
version 34
__lua__

objects = {}
cannon_r = 0

function _init()
    ammo=10
    frames=0
	seconds=0
	minutes=0
    seconds_left=30
	music_timer=0
    init_object(cannon,64,128)
    init_object(base_enemy)
end

cannon =
{
    init=function(this)
        this.spr=1
        this.x=64
        this.r=0 -- rotation
        -- momentum
        this.mx=0
        this.rx=0
    end,
    update=function(this)
        local x_input = btn(1) and .5 or (btn(0) and -.5 or 0)
        -- movement
        this.mx=mid(-3,this.mx+x_input/2,3)
        this.x+=this.mx
        this.mx=appr(this.mx,0,.05)
        -- rotation
        this.rx=mid(-0.03,this.rx+(x_input*.005),0.03)
        this.r+=this.rx
        this.rx=appr(this.rx,0,.001)

        if btnp(4) and ammo >= 1 then
            init_object(cannonball,this.x + 4, 108)
            ammo-=1
        end

        cannon_r=this.r-0.25
    end,
    draw=function(this)
        rspr(8,16,88,8,this.r,2)
        sspr(88,8,16,16,this.x,104,16,16)
        --line(this.x,128,this.x+5*sin(this.r),128-5*cos(this.r),2)
    end
}

base_enemy =
{
    init=function(this)
        this.health=3
        this.x=rnd(120)
        this.y=8
        this.spr=3
    end,
    update=function(this)
        this.y+=1
    end,
    draw=function(this)
        spr(this.spr,this.x,this.y)
    end
}
add(types,base_enemy)

cannonball =
{
    init=function(this)
        this.dir = {x=3*cos(cannon_r),y=-3*sin(cannon_r)}
        this.x += this.dir.x * 2
        this.y += this.dir.y * 2
    end,
    update=function(this)
        this.x += this.dir.x
        this.y += this.dir.y
        local hit = this.collide(base_enemy,0,0)
        if hit ~= nil then
            hit.health -= 1
            if hit.health <= 0 then
                destroy_object(hit)
                ammo += 5
                init_object(base_enemy)
            end
            destroy_object(this)
        end
    end,
    draw=function(this)
        spr(2,this.x,this.y)
    end
}
add(types,cannonball)

function init_object(type,x,y)
    local obj = {}
	obj.type = type
    obj.spr = type.tile
    obj.flip = {x=false,y=false}

	obj.x = x
	obj.y = y
	obj.hitbox = { x=0,y=0,w=8,h=8 }

	obj.spd = {x=0,y=0}

    obj.collide=function(type,ox,oy)
		local other
		for i=1,count(objects) do
			other=objects[i]
			if other ~=nil and other.type == type and other != obj and
				other.x+other.hitbox.x+other.hitbox.w > obj.x+obj.hitbox.x+ox and 
				other.y+other.hitbox.y+other.hitbox.h > obj.y+obj.hitbox.y+oy and
				other.x+other.hitbox.x < obj.x+obj.hitbox.x+obj.hitbox.w+ox and 
				other.y+other.hitbox.y < obj.y+obj.hitbox.y+obj.hitbox.h+oy then
				return other
			end
		end
		return nil
	end

    obj.check=function(type,ox,oy)
		return obj.collide(type,ox,oy) ~=nil
	end

    add(objects,obj)
	if obj.type.init~=nil then
		obj.type.init(obj)
	end
	return obj
end

function destroy_object(obj)
	del(objects,obj)
end

function _update()
    frames=((frames+1)%30)
	if frames==0 then
		seconds=((seconds+1)%60)
		if seconds==0 then
			minutes+=1
		end
	end

    if music_timer>0 then
	 music_timer-=1
	 if music_timer<=0 then
	  --music(10,0,7)
	 end
	end

    -- update each object
	foreach(objects,function(obj)
		if obj.type.update~=nil then
			obj.type.update(obj) 
		end
	end)

end

function _draw()
    -- reset all palette values
	pal()
    cls(12)

    -- draw objects
	foreach(objects, function(o)
		draw_object(o)
	end)
end

function draw_object(obj)
	if obj.type.draw ~=nil then
		obj.type.draw(obj)
	elseif obj.spr > 0 then
		spr(obj.spr,obj.x,obj.y,1,1,obj.flip.x,obj.flip.y)
	end
end

function draw_time(x,y)

	local s=seconds
	local m=minutes%60
	local h=flr(minutes/60)
	
	rectfill(x,y,x+32,y+6,0)
	print((h<10 and "0"..h or h)..":"..(m<10 and "0"..m or m)..":"..(s<10 and "0"..s or s),x+1,y+1,7)

end

function appr(val,target,amount)
 return val > target 
 	and max(val - amount, target) 
 	or min(val + amount, target)
end

function rspr(sx,sy,x,y,a,w)
    local ca,sa=cos(a),sin(a)
    local srcx,srcy,addr,pixel_pair
    local ddx0,ddy0=ca,sa
    local mask=shl(0xfff8,(w-1))
    w*=4
    ca*=w-0.5
    sa*=w-0.5
    local dx0,dy0=sa-ca+w,-ca-sa+w
    w=2*w-1
    for ix=0,w do
        srcx,srcy=dx0,dy0
        for iy=0,w do
            if band(bor(srcx,srcy),mask)==0 then
                local c=sget(sx+srcx,sy+srcy)
                sset(x+ix,y+iy,c)
            else
                sset(x+ix,y+iy,rspr_clear_col)
            end
            srcx-=ddy0
            srcy+=ddx0
        end
        dx0+=ddx0
        dy0+=ddy0
    end
end

__gfx__
00000000000000000000000000000000a00aa00a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000005555000bbbbbb0aaaaaaaa0ccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000000000055566500b5bb5b0440000440c00000c00000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000555565008bbbb80444444440c44044c00000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000000000055555500b8888b0b050050b0c00000c00000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000000000055555500b7bb7b0b800008b0c70007c00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000005555000b7bb7b0b888888b0c60806c00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000bb7bb7bb0ccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006555555555560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006665555556660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000065555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000065555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000065555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000065555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000065555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044444444444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044555444455544000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000045151544515154000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000045555544555554000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000005151500515150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000555000055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
